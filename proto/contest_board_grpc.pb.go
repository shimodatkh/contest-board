// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contestboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContestBoardServiceClient is the client API for ContestBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContestBoardServiceClient interface {
	// rpc GetMeasurement(GetMeasurementReq) returns (GetMeasurementRes) {}
	PutMeasurement(ctx context.Context, in *PutMeasurementReq, opts ...grpc.CallOption) (*PutMeasurementRes, error)
	// rpc getMeasurements(google.protobuf.Empty) returns (getMeasurementsRes) {}
	GetMeasurements(ctx context.Context, in *GetMeasurementsReq, opts ...grpc.CallOption) (*GetMeasurementsRes, error)
}

type contestBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContestBoardServiceClient(cc grpc.ClientConnInterface) ContestBoardServiceClient {
	return &contestBoardServiceClient{cc}
}

func (c *contestBoardServiceClient) PutMeasurement(ctx context.Context, in *PutMeasurementReq, opts ...grpc.CallOption) (*PutMeasurementRes, error) {
	out := new(PutMeasurementRes)
	err := c.cc.Invoke(ctx, "/contestboard.contestBoardService/putMeasurement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contestBoardServiceClient) GetMeasurements(ctx context.Context, in *GetMeasurementsReq, opts ...grpc.CallOption) (*GetMeasurementsRes, error) {
	out := new(GetMeasurementsRes)
	err := c.cc.Invoke(ctx, "/contestboard.contestBoardService/getMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContestBoardServiceServer is the server API for ContestBoardService service.
// All implementations must embed UnimplementedContestBoardServiceServer
// for forward compatibility
type ContestBoardServiceServer interface {
	// rpc GetMeasurement(GetMeasurementReq) returns (GetMeasurementRes) {}
	PutMeasurement(context.Context, *PutMeasurementReq) (*PutMeasurementRes, error)
	// rpc getMeasurements(google.protobuf.Empty) returns (getMeasurementsRes) {}
	GetMeasurements(context.Context, *GetMeasurementsReq) (*GetMeasurementsRes, error)
	mustEmbedUnimplementedContestBoardServiceServer()
}

// UnimplementedContestBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContestBoardServiceServer struct {
}

func (UnimplementedContestBoardServiceServer) PutMeasurement(context.Context, *PutMeasurementReq) (*PutMeasurementRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMeasurement not implemented")
}
func (UnimplementedContestBoardServiceServer) GetMeasurements(context.Context, *GetMeasurementsReq) (*GetMeasurementsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedContestBoardServiceServer) mustEmbedUnimplementedContestBoardServiceServer() {}

// UnsafeContestBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContestBoardServiceServer will
// result in compilation errors.
type UnsafeContestBoardServiceServer interface {
	mustEmbedUnimplementedContestBoardServiceServer()
}

func RegisterContestBoardServiceServer(s grpc.ServiceRegistrar, srv ContestBoardServiceServer) {
	s.RegisterService(&ContestBoardService_ServiceDesc, srv)
}

func _ContestBoardService_PutMeasurement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutMeasurementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestBoardServiceServer).PutMeasurement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contestboard.contestBoardService/putMeasurement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestBoardServiceServer).PutMeasurement(ctx, req.(*PutMeasurementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContestBoardService_GetMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeasurementsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContestBoardServiceServer).GetMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contestboard.contestBoardService/getMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContestBoardServiceServer).GetMeasurements(ctx, req.(*GetMeasurementsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ContestBoardService_ServiceDesc is the grpc.ServiceDesc for ContestBoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContestBoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contestboard.contestBoardService",
	HandlerType: (*ContestBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "putMeasurement",
			Handler:    _ContestBoardService_PutMeasurement_Handler,
		},
		{
			MethodName: "getMeasurements",
			Handler:    _ContestBoardService_GetMeasurements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contest_board.proto",
}
